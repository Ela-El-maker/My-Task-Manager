import 'package:flutter/material.dart';
import 'package:taskify/app_constraints/constant.dart';
import 'package:taskify/models/taskModel.dart';

class MyProfilePage extends StatelessWidget {
  const MyProfilePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    var height = MediaQuery.of(context).size.height;

    // Sample task breakdown data
    List<Task> tasks = Task.generateTasks();

    

    // double totalTasks = tasks.length.toDouble();
    // double completedTasks = tasks.where((task) => task.done == true).length.toDouble();
    // double progress = totalTasks == 0 ? 0 : (completedTasks / totalTasks) * 100;

    double totalTasks = tasks.length.toDouble();
    double completedTasks = tasks.where((task) => task.done == true).length.toDouble();
    double progress = totalTasks == 0 ? 0 : (completedTasks / totalTasks) * 100;


    return Scaffold(
      backgroundColor: Color.fromARGB(190, 65, 65, 66),
      body: Center(
        child: Container(
          padding: EdgeInsets.all(height * 0.04),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  CircleAvatar(
                    radius: height * 0.08,
                    backgroundImage: AssetImage('assets/images/ela.png'),
                  ),
                  SizedBox(width: 20),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        "Felo Ela",
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      const SizedBox(height: 5),
                      const Text(
                        "felo@gmail.com",
                        style: TextStyle(
                          fontSize: 18,
                          color: Colors.grey,
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              SizedBox(height: height * 0.04),
              Text(
                "Task Completion",
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              SizedBox(height: 10),
              LinearProgressIndicator(
                backgroundColor: kBlueLight2.withOpacity(0.5),
                valueColor: AlwaysStoppedAnimation<Color>(kBlueLight2),
                value: progress / 100.0, // Convert to percentage
              ),

              SizedBox(height: 10),
              Text(
                "${progress.toStringAsFixed(1)}% Complete",
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.grey[300],
                ),
              ),
              SizedBox(height: 20),
              Padding(
                padding: const EdgeInsets.only(left: 10), // Add left padding
                child: Text(
                  "Task Breakdown:",
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ),
              SizedBox(height: 10),

              Expanded(
                child: ListView.builder(
                  itemCount: tasks.length,
                  itemBuilder: (context, index) {
                    Task task = tasks[index];
                    return ListTile(
                      title: Text(
                        task.title!,
                        style: TextStyle(
                          fontSize: 16,
                          color: task.done == task.left
                              ? Colors.green
                              : Colors.red,
                        ),
                      ),
                      subtitle: Text(
                        "${task.done} out of ${task.left}",
                        style: TextStyle(
                          fontSize: 14,
                          color: task.done == task.left
                              ? Colors.green
                              : Colors.red,
                        ),
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
